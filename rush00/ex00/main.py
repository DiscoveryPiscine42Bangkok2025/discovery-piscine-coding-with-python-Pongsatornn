# from checkmate import checkmate

# def main():
# #     board = """\
# # R...
# # .K..
# # ..P.
# # ....\
# # """
    
# #     board = """\
# # ..
# # .K\
# # """
#     checkmate(board)

# if __name__ == "__main__":
#     main()

from checkmate import checkmate

def test_mixed_scenarios():
    print("=== ‡πÄ‡∏Ñ‡∏™‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ===")
    
    test_cases = [
        # 1. ‡∏°‡∏´‡∏≤‡∏®‡∏∂‡∏Å‡πÉ‡∏´‡∏ç‡πà - ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        ("1. ‡∏°‡∏´‡∏≤‡∏®‡∏∂‡∏Å‡πÉ‡∏´‡∏ç‡πà", """\
Q.R.
.B.P
..K.
....\
"""),
        
        # 2. ‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏à‡∏ö - Queen ‡∏Å‡∏±‡∏ö King ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô
        ("2. ‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏à‡∏ö", """\
QK..
....
....
....\
"""),
        
        # 3. ‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏•‡πâ‡∏≠‡∏°‡πÇ‡∏à‡∏°‡∏ï‡∏µ
        ("3. ‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏•‡πâ‡∏≠‡∏°‡πÇ‡∏à‡∏°‡∏ï‡∏µ", """\
R..R
....
.K..
R..R\
"""),
        
        # 4. Pawn Army ‡πÇ‡∏à‡∏°‡∏ï‡∏µ (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        ("4. Pawn Army", """\
PP..
.PK.
PP..
....\
"""),
        
        # 5. ‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï - ‡∏ó‡∏≤‡∏á‡∏≠‡∏∂‡∏î
        ("5. ‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï", """\
RPBR
P.KP
BPPR
RBBQ\
"""),
        
        # 6. ‡∏¢‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏´‡∏ç‡πà - ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô 5x5
        ("6. ‡∏¢‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏´‡∏ç‡πà", """\
Q....
.....
..K..
.....
....R\
"""),
        
        # 7. ‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Å‡∏ó‡∏∞‡∏•‡∏ß‡∏á - Bishop vs Rook
        ("7. ‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Å‡∏ó‡∏∞‡∏•‡∏ß‡∏á", """\
B...
.R..
..K.
....\
"""),
        
        # 8. King ‡∏´‡∏•‡∏ö‡∏ã‡πà‡∏≠‡∏ô
        ("8. King ‡∏´‡∏•‡∏ö‡∏ã‡πà‡∏≠‡∏ô", """\
....
.PPP
.PKP
.PPP\
"""),
        
        # 9. ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö - ‡∏´‡∏°‡∏≤‡∏Å‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏´‡∏°‡∏î
        ("9. ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö", """\
QRBP
PPPK
BRRQ
PPBR\
"""),
        
        # 10. ‡πÇ‡∏•‡∏Å‡∏™‡∏á‡∏ö - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
        ("10. ‡πÇ‡∏•‡∏Å‡∏™‡∏á‡∏ö", """\
....
.Q.K
....
R...\
"""),
    ]
    
    for name, board in test_cases:
        print(f"{name}:")
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
        lines = board.strip().split('\n')
        for i, line in enumerate(lines):
            print(f"  ‡πÅ‡∏ñ‡∏ß {i}: {line}")
        print(f"  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ", end="")
        checkmate(board)
        print()

def test_edge_cases():
    print("=== ‡πÄ‡∏Ñ‡∏™‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (Edge Cases) ===")
    
    edge_cases = [
        # 1. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÅ‡∏õ‡∏•‡∏Å - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        ("1. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÅ‡∏õ‡∏•‡∏Å", """\
QK
R.
PPP\
"""),
        
        # 2. King ‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        ("2. King ‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß", """\
QRBP
PPRB
BRRQ
PPBR\
"""),
        
        # 3. Twin Kings
        ("3. Twin Kings", """\
K...
....
..Q.
...K\
"""),
        
        # 4. ‡∏°‡∏¥‡∏ô‡∏¥‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô 2x2
        ("4. ‡∏°‡∏¥‡∏ô‡∏¥‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô", """\
QK
..\
"""),
        
        # 5. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà 6x6
        ("5. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà", """\
......
.Q....
......
...K..
......
.....R\
"""),
        
        # 6. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏õ‡∏•‡πà‡∏≤
        ("6. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏õ‡∏•‡πà‡∏≤", ""),
        
        # 7. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        ("7. ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "QKR"),
        
        # 8. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏à‡∏¥‡πã‡∏ß 1x1
        ("8. ‡∏à‡∏¥‡πã‡∏ß 1x1", "K"),
        
        # 9. ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏à‡∏∏‡∏î
        ("9. ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏à‡∏∏‡∏î", """\
....
....
....
....\
"""),
        
        # 10. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏õ‡∏•‡∏Å‡πÜ
        ("10. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏õ‡∏•‡∏Å", """\
1K23
4567
89QR
BCDE\
""")
    ]
    
    for name, board in edge_cases:
        print(f"{name}:")
        print(f"  Input: {repr(board[:20])}{'...' if len(board) > 20 else ''}")
        print(f"  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ", end="")
        checkmate(board)
        print()

def test_blocking_scenarios():
    print("=== ‡πÄ‡∏Ñ‡∏™‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å ===")
    
    blocking_cases = [
        # 1. Rook ‡∏ñ‡∏π‡∏Å Pawn ‡∏ö‡∏•‡πá‡∏≠‡∏Å
        ("1. Rook ‡∏ñ‡∏π‡∏Å Pawn ‡∏ö‡∏•‡πá‡∏≠‡∏Å", """\
R...
.P..
..K.
....\
"""),
        
        # 2. Bishop ‡∏ñ‡∏π‡∏Å Queen ‡∏ö‡∏•‡πá‡∏≠‡∏Å
        ("2. Bishop ‡∏ñ‡∏π‡∏Å Queen ‡∏ö‡∏•‡πá‡∏≠‡∏Å", """\
B...
.Q..
..K.
....\
"""),
        
        # 3. Queen ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô
        ("3. Queen ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô", """\
Q...
.P..
..R.
...K\
"""),
        
        # 4. King ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ (‡∏Ñ‡∏ß‡∏£ Success!)
        ("4. King ‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ", """\
R...
.K..
..K.
....\
"""),
        
        # 5. ‡∏ó‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏° - Queen ‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        ("5. ‡∏ó‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏°", """\
QP..
....
..K.
....\
"""),
    ]
    
    for name, board in blocking_cases:
        print(f"{name}:")
        lines = board.strip().split('\n')
        for i, line in enumerate(lines):
            print(f"  ‡πÅ‡∏ñ‡∏ß {i}: {line}")
        print(f"  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ", end="")
        checkmate(board)
        print()

def test_pawn_weirdness():
    print("=== ‡πÄ‡∏Ñ‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏© Pawn (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ===")
    
    pawn_cases = [
        # 1. Pawn ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏∏‡∏Å‡∏°‡∏∏‡∏° (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        ("1. Pawn ‡∏ã‡πâ‡∏≤‡∏¢-‡∏ö‡∏ô", """\
K...
.P..
....
....\
"""),
        
        ("2. Pawn ‡∏Ç‡∏ß‡∏≤-‡∏ö‡∏ô", """\
..K.
.P..
....
....\
"""),
        
        ("3. Pawn ‡∏ã‡πâ‡∏≤‡∏¢-‡∏•‡πà‡∏≤‡∏á", """\
....
.P..
K...
....\
"""),
        
        ("4. Pawn ‡∏Ç‡∏ß‡∏≤-‡∏•‡πà‡∏≤‡∏á", """\
....
.P..
..K.
....\
"""),
        
        # 5. Pawn ‡∏Å‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á
        ("5. Pawn ‡∏Å‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á", """\
KPK.
PPP.
KPK.
....\
"""),
    ]
    
    for name, board in pawn_cases:
        print(f"{name}:")
        lines = board.strip().split('\n')
        for i, line in enumerate(lines):
            print(f"  ‡πÅ‡∏ñ‡∏ß {i}: {line}")
        print(f"  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ", end="")
        checkmate(board)
        print()

def main():
    print("üèÅ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î checkmate ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô === üèÅ")
    print()
    
    test_mixed_scenarios()
    print("=" * 60)
    
    test_edge_cases()
    print("=" * 60)
    
    test_blocking_scenarios()  
    print("=" * 60)
    
    test_pawn_weirdness()
    print("=" * 60)
    
    print("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! üéâ")

if __name__ == "__main__":
    main()